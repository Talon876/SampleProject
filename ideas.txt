I was working on some of the command stuff.
I was thinking that any command that outputs stuff (help, list, etc) should implement a DataCommand interface which forces a string getResults() method.
Then when the command is executed you can check if its a data command and if it is, print out the results given by the getResults method.
If it's not a DataCommand, then it won't print anything out but will still be sent to my EffectManager where I can parse its arguments and do what is needed (this will happen to DataCommands too, it will also just be outputting text).

I moved the COMMANDS enum to public level in the commands package so that the HelpCommand can have access to them all.

Effect creation process:
user inputs string -> string is parsed in to command -> command is sent to CommandListeners -> if it's an EffectCommand, its sent to CommandToEffect -> Creates an Effect object representing the command -> put on the effect stack in the EffectManager


<Steve>
Sounds good to me, if we use a decorator on the Commands one with Data and one with Effects we should be able to achieve that.

I added a doCommand function to Command so that you can call the start of the command whether its one or the other type. 
When you implement a specific type of command you can add it's method calls to doCommand in the concrete class.
</Steve>